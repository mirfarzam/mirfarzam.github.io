{"version":3,"sources":["logo.svg","Components/FullSection.js","Components/LightSwitch.js","Actions/action.js","Components/Navbar.js","Components/Hero.js","Components/Card.js","App.js","serviceWorker.js","Reducers/defaultState.js","Store/store.js","index.js"],"names":["module","exports","FullSection","children","this","props","componentStyle","backgroundColor","background","mode","color","id","className","style","Component","ConnectedFullSection","connect","state","LightSwitch","type","onClick","changeLight","dispatch","ownProps","changeMode","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","spy","smooth","duration","ConnectedNavbar","Hero","dayTitle","nightTitle","python","console","log","title","url","ConnectedHero","Card","src","img","alt","link","App","data","sections","items","content","marginLeft","marginRight","marginTop","marginBottom","Boolean","window","location","hostname","match","defaultState","store","createStore","action","applyMiddleware","createLogger","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc6e9d4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\nimport '../Styles/App.css';\nimport Script from 'react-load-script'\nimport {connect} from \"react-redux\";\n\n\nclass FullSection extends Component {\n    render() {\n        const {children} = this.props;\n\n        let componentStyle = {\n            backgroundColor: this.props.background,\n        };\n\n        if(this.props.mode === \"night\") {\n            componentStyle.backgroundColor = \"black\";\n            componentStyle.color = \"white\";\n        } else {\n            componentStyle.backgroundColor = \"white\";\n            componentStyle.color=\"black\"\n        }\n\n        return (\n            <section  id= {`${this.props.id || \"farzam\"}`} className={ `${this.props.className || \"\"}`  + \" fullPage\"} style={componentStyle}>\n                <div className={\"container\"}>\n                    {children}\n                </div>\n            </section>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mode: state.mode\n    };\n}\n\nexport const ConnectedFullSection = connect(\n    mapStateToProps,\n    null\n)(FullSection);\n\n\n\n\n\n\n","import {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport changeMode from '../Actions/action'\n\nimport React, {Component} from \"react\";\nimport '../Styles/LightSwitch.css';\nimport Script from \"react-load-script\";\n\n\nclass LightSwitch extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"night\"\n        }\n    }\n\n    toggle() {\n        let newMode = (this.state.mode === \"night\") ? \"day\" : \"night\";\n        // this.props.modeActions(newMode)\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"toggle\">\n                <input className=\"toggle-input\" type=\"checkbox\" onClick={()=> this.props.changeLight(this.props.mode)}/>\n                <div className=\"toggle-bg\"/>\n                <div className=\"toggle-switch\">\n                    <div className=\"toggle-switch-figure\"/>\n                    <div className=\"toggle-switch-figureAlt\"/>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mode: state.mode\n    };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        changeLight(mode) {\n            dispatch(changeMode(mode));\n        }\n    };\n}\n//\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LightSwitch);\n","export const CHANGE_MODE = 'CHANGE_MODE' ;// action types\n\nexport default function changeMode(mode) {\n    return {\n        type: CHANGE_MODE,\n        mode : (mode === \"night\") ? \"day\" : \"night\"\n    };\n}","import React, {Component} from \"react\";\nimport '../Styles/LightSwitch.css';\nimport Script from \"react-load-script\";\nimport LightSwitch from \"./LightSwitch\";\nimport {connect} from \"react-redux\";\nimport { Link, animateScroll as scroll } from \"react-scroll\";\n\nclass Navbar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"night\"\n        }\n    }\n\n\n\n    render() {\n\n        let componentStyle = {\n            backgroundColor : \"white\" ,\n            color : \"black\"\n        };\n        if(this.props.mode === \"night\") {\n            componentStyle.backgroundColor = \"black\";\n            componentStyle.color = \"white\";\n        } else {\n            componentStyle.backgroundColor = \"white\";\n            componentStyle.color = \"black\";\n        }\n\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-batman\"  style={componentStyle}>\n                <a className=\"navbar-brand\" href=\"#\">MirFarzam</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\"\n                        aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"/>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"#\">\n                                <Link to=\"About\"\n                                      spy={true}\n                                      smooth={true}\n                                      duration={500}\n                                >About</Link></a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">\n                                <Link to=\"Projects\"\n                                      spy={true}\n                                      smooth={true}\n                                      duration={500}>Projects</Link>\n                            </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">\n                                <Link to=\"Skills\"\n                                      spy={true}\n                                      smooth={true}\n                                      duration={500}>Skills</Link>\n                            </a>\n                        </li>\n                    </ul>\n                    <span className=\"navbar-text\">\n      <LightSwitch />\n    </span>\n                </div>\n            </nav>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mode: state.mode\n    };\n}\n\nexport const ConnectedNavbar = connect(\n    mapStateToProps,\n    null\n)(Navbar);\n","import React, {Component} from \"react\";\nimport '../Styles/App.css';\nimport Script from 'react-load-script'\nimport {connect} from \"react-redux\";\nimport data from \"../data\";\n\n\n\n\nclass Hero extends Component {\n\n    dayTitle = \"I'm SeyedFarzam Mirmoeini\"\n    nightTitle = \"I'm MirFarzam\"\n    python = \"\"\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"night\"\n        }\n    }\n\n    render() {\n        const {children} = this.props;\n        console.log(\"should be in \"+ this.props.mode);\n        let componentStyle = {\n            color: \"white\" ,\n        };\n        let title = \"\"\n        if(this.props.mode === \"night\") {\n            componentStyle.color = \"white\";\n            title = this.nightTitle\n            this.python = \"Master\"\n        } else {\n            componentStyle.color = \"black\";\n            title = this.dayTitle\n            this.python = \"Developer\"\n        }\n        return [\n            <Script url=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\" />,\n            <div id={\"firstSection\"}  className={`${this.props.className || \"\"}`} style={componentStyle}  >\n                <h1 className={\"title\"}>\n                    {title}\n                </h1>\n                <h2>The Batman Ninja</h2>\n                <h3>Python {this.python} and Machine Learning and BigData Engineer</h3>\n            </div>,\n            <Script url=\"/scripts/bats.js\" />,\n        ];\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mode: state.mode\n    };\n}\n\nexport const ConnectedHero = connect(\n    mapStateToProps,\n    null\n)(Hero);\n\n\n\n\n\n\n","import React, { Component } from \"react\";\nimport '../Styles/App.css';\n\n\nclass Card extends Component {\n    render(){\n        return(\n            <div className={\"col-lg-3 col-md-3 col-sm-6\"}>\n                <div className=\"card\">\n                    <img className=\"card-img-top\" src={`${this.props.img}`} alt=\"Card image cap\"/>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{this.props.title}</h5>\n                        <p className=\"card-text\">\n                            open source platform for tracking and logging data with real-time processing\n                        </p>\n                        <a href={`${this.props.link}`} className=\"btn btn-primary\">Go to Repo</a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n\n\n\n\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './Styles/App.css';\nimport data from \"./data\"\nimport { SocialIcon } from 'react-social-icons';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {ConnectedFullSection} from \"./Components/FullSection\";\nimport LightSwitch from \"./Components/LightSwitch\";\nimport { ConnectedNavbar }  from \"./Components/Navbar\";\nimport { ConnectedHero }  from \"./Components/Hero\"\nimport Card from \"./Components/Card\";\n\n\n\nfunction App() {\n    return (\n        <div className={\"App\"}>\n\n            <ConnectedNavbar/>\n            <ConnectedFullSection background={\"black\"}>\n                <ConnectedHero className={\"hero\"}>\n\n                </ConnectedHero>\n             </ConnectedFullSection>\n\n<hr/>\n\n            <ConnectedFullSection id=\"About\" className={\"about\"}>\n                <h3>\n                    {data.sections[0].title}\n                </h3>\n                <p>\n                    {data.sections[0].items[0].content}\n                </p>\n                <p>\n                <SocialIcon url=\"https://www.instagram.com/mirfarzam/\" style={{marginLeft:\"10px\", marginRight:\"10px\"}}/>\n                <SocialIcon url=\"https://www.linkedin.com/in/mirfarzam/\" style={{marginLeft:\"10px\", marginRight:\"10px\"}}/>\n                <SocialIcon url=\"https://twitter.com/mirfarzam\" style={{marginLeft:\"10px\", marginRight:\"10px\"}}/>\n                </p>\n            </ConnectedFullSection>\n\n            <hr/>\n\n            <ConnectedFullSection id=\"Projects\" className={\"opensource\"}>\n                <img  className={\"title-logo\"} src={\"./yoda.png\"}/>\n                <h3 style={{marginTop:'20px', marginBottom:'20px'}}>\n                    MAY THE SOURCE BE WITH YOU\n                </h3>\n                <p>\n                    Open source matters! I use open source codes everyday so I share most of my personal projects in order to help the open source ecosystem\n                </p>\n                <div className={\"row\"}>\n                    <Card img={\"/heravi.png\"} title={\"Heravi Analytics\"} link={\"https://github.com/heravi-analytics\"}/>\n                    <Card img={\"/zaal.jpg\"}  title={\"Zaal AI\"} link={\"https://github.com/Zaal-ai\"}/>\n                    <Card img={\"/namb.jpg\"}  title={\"NAMB\"} link={\"https://github.com/mirfarzam/namb\"}/>\n                    <Card img={\"/db.png\"}  title={\"Downloader Bro\"} link={\"https://github.com/mirfarzam/DownloaderBro\"}/>\n\n                </div>\n            </ConnectedFullSection>\n\n            <hr/>\n\n\n            <ConnectedFullSection id=\"Skills\" className={\"opensource\"}>\n                <img  className={\"title-logo\"} src={\"./batman.png\"}/>\n                <h2 style={{marginTop:'20px', marginBottom:'20px', color:'#4a4849'}}>\n                    My Skills\n                </h2>\n                <div className={\"row justify-content-center\"}>\n                    <div className={\"skill-card python\"}>Python</div>\n                    <div className={\"skill-card java\"}>Java</div>\n                    <div className={\"skill-card scala\"}>Scala</div>\n                    <div className={\"skill-card javascript\"}>JavaScript</div>\n                </div>\n            </ConnectedFullSection>\n\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const defaultState = {\n    mode : \"day\"\n};","import {createStore, applyMiddleware} from \"redux\";\nimport {defaultState} from \"../Reducers/defaultState\";\nimport {CHANGE_MODE} from \"../Actions/action\";\nimport {createLogger} from \"redux-logger\";\n\nexport const store = createStore(\n    function reducer(state = defaultState, action) {\n        switch(action.type) {\n            case CHANGE_MODE :\n                return {\n                    ...state,\n                    mode: action.mode\n                };\n            default:\n                return state;\n        }\n    },\n    applyMiddleware(createLogger())\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from \"react-redux\"\nimport {store} from \"./Store/store\"\n\nconsole.log(store.getState());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}